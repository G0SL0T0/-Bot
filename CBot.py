#–ß—É–¥–æ –±–æ—Ç
import discord
import asyncio
from discord.ext import commands
import pytz
from datetime import datetime, timedelta
import random
import json
import time
import datetime

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
message_count = {}
TOP_LIST_FILE = "top_list.json"
prefix = "!"
random_responses=[
    "–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ"
    ]
allowed_users = ['708019826232262686', '303101350118555658']

bot = commands.Bot(intents=discord.Intents.all(), case_insensitive=True, command_prefix=prefix)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_top_list():
    try:
        with open(TOP_LIST_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []
def save_top_list(top_list):
    with open(TOP_LIST_FILE, "w") as file:
        json.dump(top_list, file)
def load_last_update_and_price():
    return datetime(2024, 4, 24), 50000
def save_last_update_and_price(date, price):
    pass
def load_balances():
    try:
        with open('Jrun_balance.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_balances(balances):
    with open('Jrun_balance.json', 'w') as file:
        json.dump(balances, file, indent=4)

def daily_balance_check(member_id, balances):
    member_data = balances.setdefault(str(member_id), {'balance': 0, 'last_message': ''})
    today = datetime.now(pytz.timezone('Asia/Sakhalin')).date().isoformat()
    if member_data['last_message'] != today:
        member_data['balance'] += 1
        member_data['last_message'] = today
        save_balances(balances)

async def convert_to_member(ctx, argument):
    try:
        member = await commands.MemberConverter().convert(ctx, argument)
    except commands.MemberNotFound:
        member = ctx.guild.get_member_named(argument)
    if not member:
        raise commands.BadArgument(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{argument}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    return member
def check_last_reward_time(member_id):
    with open('rewards.json', 'r') as f:
        rewards = json.load(f)
    return rewards.get(str(member_id), {'last_reward': None})['last_reward']
def update_last_message_time(user_id):
    with open('last_messages.json', 'r+') as f:
        try:
            last_messages = json.load(f)
        except json.JSONDecodeError:
            last_messages = {}
        user_id_str = str(user_id)
        now = datetime.utcnow()
        last_message_time = last_messages.get(user_id_str, {'last_message': None})['last_message']
        last_message_date = datetime.strptime(last_message_time, '%Y-%m-%d %H:%M:%S') if last_message_time else None
        if not last_message_date or now - last_message_date > timedelta(days=1):
            last_messages[user_id_str] = {'last_message': now.strftime('%Y-%m-%d %H:%M:%S')}
            f.seek(0)
            json.dump(last_messages, f, indent=4)
            f.truncate()
            return True
        return False
def get_today():
    return datetime.now().strftime('%Y-%m-%d')
def read_data():
    try:
        with open('percentages.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return {}

def write_data(data):
    with open('percentages.json', 'w') as file:
        json.dump(data, file, indent=4)

# –∑–∞–ø—É—Å–∫        
@bot.event
async def on_ready():
    print(f"{bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

@bot.event
async def on_message(message):
    balances = load_balances()
    daily_balance_check(message.author.id, balances)
    if message.author == bot.user:
        return
    trigger_phrase = '–û –≤–µ–ª–∏–∫–∏–π –∫–æ–¥ –ø–∏—Ç–æ–Ω–∞ –¥–∞—Ä—É–π –º–Ω–µ —Å–∏–ª—É –∏–≥—Ä'
    if message.content == trigger_phrase:
        if str(message.author.id) in allowed_users:
            games = ['EVE', 'GTFO', 'Tradesman', 'DoW 3', 'Hunt', 'Witcher']
            selected_game = random.choice(games)
            await message.channel.send(f"–î–∞—Ä—É—é —Ç–µ–±–µ —Å–∏–ª—É –Ω–∞ {selected_game}!")
        else:
            await message.channel.send("–¢—ã –Ω–µ –¥–æ—Å—Ç–æ–∏–Ω —Å–∏–ª—ã –∏–≥—Ä –æ—Ç –ø–∏—Ç–æ–Ω–∞.")
    current_time = time.time()
    message_count.setdefault(message.author.id, {"count": 0, "last_message_time": 0})
    if current_time - message_count[message.author.id]["last_message_time"] > 1800:  # 1800 —Å–µ–∫—É–Ω–¥ = 30 –º–∏–Ω—É—Ç
        message_count[message.author.id]["count"] = 0
    message_count[message.author.id]["last_message_time"] = current_time
    message_count[message.author.id]["count"] += 1
    if message_count[message.author.id]["count"] > 5:
        await message.channel.send(f"{message.author.mention}, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    await bot.process_commands(message)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        response = random.choice(["–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞"])
        await ctx.send(response)
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç '{error.param.name}'.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç '{error.param.name}'. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    else:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}")


# –í—Ä–µ–º—è
@bot.command(name='–í—Ä–µ–º—è')
async def get_time(ctx):
    time1 = pytz.timezone('Asia/Sakhalin')
    time2 = datetime.datetime.now(time1)
    time3 = time2 + datetime.timedelta(hours=0)
    formatted_time = time3.strftime("%H:%M:%S")
    await ctx.send(f"–°–µ–π—á–∞—Å —É –ß—É–¥–∞—á–∫–∏: {formatted_time}")
    print('–ö–æ–º–∞–Ω–¥–∞ –í—Ä–µ–º—è')
# –ö–æ–º–∞–Ω–¥–∞ - Vk Play
@bot.command(name='–í–∫–ø–ª–µ–π')
async def vk_play(ctx):
    await ctx.send("# [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Vk Play Live](https://live.vkplay.ru/chudachkapw)")
# –ö–æ–º–∞–Ω–¥–∞ - Twitch
@bot.command(name='–¢–≤–∏—á')
async def Twitch(ctx):
    await ctx.send("# [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Twitch](https://www.twitch.tv/chudachkafun)")
# –ö–æ–º–∞–Ω–¥–∞ - –î–∏—Å–∫–æ—Ä–¥
@bot.command(name='–î–∏—Å–∫–æ—Ä–¥')
async def discord_info(ctx):
    await ctx.send("# [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É Discord!](https://discord.com/invite/pQ9zfKzmCj)")
# –ö–æ–º–∞–Ω–¥–∞ - –ü–ö
@bot.command(name='–ü–ö')
async def pc_info(ctx):
    await ctx.send("## –ö–æ–Ω—Ñ–∏–≥ –ü–ö –ß—É–¥–∞—á–∫–∏\n Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz\n Motherboard ‚Äî Gigabyte GA-Z97P-D3\n MSI GeForce RTX 4060 GAMING X")
# –ö–æ–º–∞–Ω–¥–∞ - –ú–µ–º—ã
@bot.command(name='–º–µ–º')
async def memes(ctx):
    await ctx.send("# [–ö–∏–Ω—å –º–µ–º –ß—É–¥–∞—á–∫–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é!](https://memealerts.com/643f478676d4d6f40e06de95)")
# –ö–æ–º–∞–Ω–¥–∞ - –ë—É—Å—Ç–∏
@bot.command(name='–±—É—Å—Ç–∏')
async def memes(ctx):
    await ctx.send("# [–ü–æ–¥–¥–µ—Ä–∂–∏ –ß—É–¥–∞—á–∫—É –Ω–∞ –±—É—Å—Ç–∏!](https://boosty.to/chudachkapw/purchase/784395?share=subscription_link)")
# –ö–æ–º–∞–Ω–¥–∞ - –ì–¥–µ —Å—Ç—Ä–∏–∏–º
@bot.command(name='–ì–¥–µ—Å—Ç—Ä–∏–º')
async def stream_info(ctx):
    excuses = [
        "–°–µ–≥–æ–¥–Ω—è —É–∂–µ –Ω–µ —É—Å–ø–µ–µ–º, –∂–¥–µ–º –∑–∞–≤—Ç—Ä–∞.",
        "–°—Ç—Ä–∏–º –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –æ–∂–∏–¥–∞–π—Ç–µ!",
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."
    ]
    excuse = random.choice(excuses)
    await ctx.send(f"{excuse}")
# –ö–æ–º–∞–Ω–¥–∞ - –î–æ—Ç–∞
@bot.command(name='–î–æ—Ç–∞')
async def play_dota(ctx):
    last_update, base_price = load_last_update_and_price()
    today = datetime.now()
    days_passed = (today - last_update).days
    if days_passed > 0:
        new_price = base_price + days_passed * 11
        save_last_update_and_price(today, new_price)
    else:
        new_price = base_price
    message = f"```–ß—É–¥–æ –ø–æ–∏–≥—Ä–∞–µ—Ç –≤ –¥–æ—Ç—É –∑–∞ {new_price:.3f} —Ä—É–±–ª–µ–π```"
    await ctx.send(message)
# –ö–æ–º–∞–Ω–¥–∞ - –¢–∞–Ω–∫–∏
@bot.command(name='–¢–∞–Ω–∫–∏')
async def play_dota(ctx):
    message = "```–ß—É–¥–æ –Ω–µ –ø–æ–∏–≥—Ä–∞–µ—Ç –≤ –¢–∞–Ω–∫–∏ ü§°```"
    await ctx.send(message)


# !—Å—Ç—Ä–∏–º
@bot.command()
@commands.has_permissions(administrator=True)
async def —Å—Ç—Ä–∏–º(ctx, *, comment: str = ''):
    channel_id = 1179745995345645609
    channel = bot.get_channel(channel_id)
    if channel is not None:
        message = (
            f"## –ù–∞—á–∞–ª—Å—è —Å—Ç—Ä–∏–º! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å! {comment}\n"
            "## [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Twitch](https://www.twitch.tv/chudachkafun)\n"
            "## [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Vk Play Live](https://live.vkplay.ru/chudachkapw)"
        )
        await channel.send(message)
    else:
        await ctx.send("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.")


# –∂–æ–ø–∫–∏
@bot.command(name='–ù–æ–≤–∞—è–ñ–æ–ø–∫–∞')
async def new_user(ctx, nickname):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    for user_info in top_list:
        if user_info['–Ω–∏–∫–Ω–µ–π–º'] == nickname:
            await ctx.send("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
    user_num = len(top_list) + 1
    top_list.append({'–Ω–∏–∫–Ω–µ–π–º': nickname, '–∂–æ–ø–∫–∏': 2})
    save_top_list(top_list)
    await ctx.send(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º {user_num}.")
@bot.command(name='–ù–æ–º–µ—Ä–∞–∂–æ–ø–æ–∫')
async def list_users(ctx):
    top_list = load_top_list()
    users_info = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
    for user_num, user_info in enumerate(top_list, start=1):
        users_info += f"{user_num}. {user_info['–Ω–∏–∫–Ω–µ–π–º']} - ({user_info['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫)\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–æ–ø–æ–∫ –∫ –≤—ã–≤–æ–¥—É
    await ctx.send(users_info)
@bot.command(name='–ñ–æ–ø–∫–∞')
async def asses_leaderboard(ctx):
    top_list = load_top_list()
    leaderboard = "–¢–æ–ø-5 –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∂–æ–ø–æ–∫:\n"
    for i, user_info in enumerate(sorted(top_list, key=lambda x: x['–∂–æ–ø–∫–∏'], reverse=True)[:5], start=1):
        leaderboard += f"{i}. {user_info['–Ω–∏–∫–Ω–µ–π–º']} - ({user_info['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫)\n"
    await ctx.send(leaderboard)
@bot.command(name='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏–∂–æ–ø–∫–∏')
async def transfer_asses(ctx, from_user: int, to_user: int, amount: int):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    if from_user < 1 or from_user > len(top_list) or to_user < 1 or to_user > len(top_list):
        await ctx.send("–û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        return
    top_list[from_user - 1]['–∂–æ–ø–∫–∏'] -= amount
    top_list[to_user - 1]['–∂–æ–ø–∫–∏'] += amount
    save_top_list(top_list)
    await ctx.send(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∂–æ–ø–æ–∫ –æ—Ç {top_list[from_user - 1]['–Ω–∏–∫–Ω–µ–π–º']} –∫ {top_list[to_user - 1]['–Ω–∏–∫–Ω–µ–π–º']}.")
@bot.command(name='–º–∏–Ω—É—Å')
async def minus_asses(ctx, amount: int, user_number: int):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    if user_number < 1 or user_number > len(top_list):
        await ctx.send("–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    top_list[user_number - 1]['–∂–æ–ø–∫–∏'] -= amount
    save_top_list(top_list)
    await ctx.send(f"–£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount} –∂–æ–ø–æ–∫ —É {top_list[user_number - 1]['–Ω–∏–∫–Ω–µ–π–º']}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {top_list[user_number - 1]['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫.")
@bot.command(name='–ø–ª—é—Å')
async def plus_asses(ctx, amount: int, user_number: int):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    if user_number < 1 or user_number > len(top_list):
        await ctx.send("–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    top_list[user_number - 1]['–∂–æ–ø–∫–∏'] += amount
    save_top_list(top_list)
    await ctx.send(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∂–æ–ø–æ–∫ –∫ {top_list[user_number - 1]['–Ω–∏–∫–Ω–µ–π–º']}.")


# –ö–æ–º–∞–Ω–¥–∞ !–ü—Ä–æ—Ü–µ–Ω—Ç
#@bot.command(name='–ü—Ä–æ—Ü–µ–Ω—Ç')
#async def percent(ctx):
    #user_id = str(ctx.author.id)
    #data = read_data()
    #print('1')
    #user_data = data.get(user_id, {'date': None, 'percent': 0, 'nickname': ctx.author.display_name, 'uses': 0})
    #unique_roles = ['—Ä–æ–ª—å1', '—Ä–æ–ª—å2']
    #has_unique_role = any(role.name in unique_roles for role in ctx.author.roles)
    #print('2')
    #print(f"user_data['date']: {user_data['date']}")
    #print(f"has_unique_role: {has_unique_role}")
    #print(f"get_today(): {get_today()}")
    #if user_data['date'] == get_today() and not has_unique_role:
        #print('3 - –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É')
        #await ctx.send("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É —Å–µ–≥–æ–¥–Ω—è!")
        #return

    #print('3 - –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º')
    #user_data['uses'] += 1
    #if user_data['percent'] < 100:
        #if user_data['percent'] == 0:
            #print('4')
            #new_percent = random.randint(0, 100)
        #else:
            #new_percent = random.randint(0, 99)
            #print('5')
        #user_data['percent'] = max(user_data['percent'], new_percent)
    #user_data['date'] = get_today()
    #print('6')
    #data[user_id] = user_data
    #write_data(data)
    #print('–û—Ç–ø—Ä–∞–≤–∫–∞')
    #await ctx.send(f"{user_data['nickname']} –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç: {user_data['percent']}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {user_data['uses']} —Ä–∞–∑)")
    #print('–ö–æ–Ω–µ—Ü')

@bot.command(name='–¢–æ–ø')
async def top_users(ctx):
    data = read_data()
    top_users = sorted(data.items(), key=lambda x: x[1]['percent'], reverse=True)
    message = "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, user_data in top_users[:10]:
        message += f"{user_data['nickname']} - {user_data['percent']}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {user_data['uses']} —Ä–∞–∑)\n"
    await ctx.send(message)


# –ß—Ç–æ –∂–µ —è —Å–¥–µ–ª–∞—é —Å –∂—Ä—É–Ω–∞–º–∏
@bot.command()
async def –±–∞–ª–∞–Ω—Å(ctx, *, member: discord.Member = None):
    if member is None:
        member = ctx.author
    balances = load_balances()
    user_balance = balances.get(str(member.id), {'balance': 0})['balance']
    await ctx.send(f"–ë–∞–ª–∞–Ω—Å –ñ—Ä—É–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {user_balance}üíµ")

@bot.command(name='–ë–æ–Ω—É—Å')
async def on_bonus_command(ctx):
    user_id = str(ctx.author.id)
    balances = load_balances()
    member_data = balances.setdefault(user_id, {'balance': 0, 'last_message': ''})
    today = datetime.now(pytz.timezone('Asia/Sakhalin')).date().isoformat()
    if member_data['last_message'] != today:
        member_data['balance'] += 1
        member_data['last_message'] = today
        save_balances(balances)
        await ctx.send(f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å! –í–∞—à –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {member_data["balance"]} –∂—Ä—É–Ω–æ–≤.')
    else:
        next_bonus_time = datetime.strptime(member_data['last_message'], '%Y-%m-%d') + timedelta(days=1)
        time_remaining = next_bonus_time - datetime.now(pytz.timezone('Asia/Sakhalin'))
        hours, remainder = divmod(int(time_remaining.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        await ctx.send(f'–ü–æ–≥—É–ª—è–π—Ç–µ! –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç.')


@bot.command()
async def –º–∞–≥–∞–∑–∏–Ω(ctx):
    # –º–∞–≥–∞–∑
    pass




#1 + –æ—Ç–≤–µ—Ç–æ—á–∫–∞

# –¢–æ–∫–µ–Ω
bot.run("MTIzMzAyMTQ4NzE3MTEwODkwNQ.GJHW7F.XZRRzqVMFKD4MW0N5yVzjJIfwFZdXuVICmWcRw") 
