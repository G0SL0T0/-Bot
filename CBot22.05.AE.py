#–ß—É–¥–æ –±–æ—Ç
import discord
import asyncio
from discord.ext import commands
import pytz
from datetime import datetime, timedelta
import random
import json
import time
import datetime

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
message_count = {}
TOP_LIST_FILE = "top_list.json"
prefix = "!"
random_responses=[
    "–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ"
    ]
# –±–æ—Ç
bot = commands.Bot(intents=discord.Intents.all(), case_insensitive=True, command_prefix=prefix)

ticket_data_file = "tickets.json"
rewards = {
    100: {"Tier 4": 0.5, "Tier 5": 0.5},
    50: {"Tier 3": 1.0}
}
# –§—É–Ω–∫—Ü–∏–∏
def load_top_list():
    try:
        with open(TOP_LIST_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_top_list(top_list):
    with open(TOP_LIST_FILE, "w") as file:
        json.dump(top_list, file)

def get_current_date():
    return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

def calculate_price():
    print('1.0');
    start_date = datetime(2024, 4, 24)
    print('1');
    today = datetime.now()
    print('2');
    delta = today - start_date
    print('3');
    price_increment = delta.days * 11
    print('4');
    return 50000 + price_increment

def check_balance_file(user_id):
    try:
        with open('Jrun_balance.json', 'r') as f:
            balances = json.load(f)
    except FileNotFoundError:
        balances = {}
    except json.JSONDecodeError:
        balances = {}
        with open('Jrun_balance.json', 'w') as f:
            json.dump(balances, f, indent=4)
    if str(user_id) not in balances:
        balances[str(user_id)] = {'balance': 0, 'username': '', 'user_id': user_id}
        with open('Jrun_balance.json', 'w') as f:
            json.dump(balances, f, indent=4)
    return balances

async def convert_to_member(ctx, argument):
    try:
        member = await commands.MemberConverter().convert(ctx, argument)
    except commands.MemberNotFound:
        member = ctx.guild.get_member_named(argument)
    if not member:
        raise commands.BadArgument(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{argument}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    return member

def check_last_reward_time(user_id):
    if not os.path.exists('rewards.json'):
        with open('rewards.json', 'w') as f:
            json.dump({}, f, indent=4)
    try:
        with open('rewards.json', 'r') as f:
            rewards = json.load(f)
    except json.JSONDecodeError:
        rewards = {}
        with open('rewards.json', 'w') as f:
            json.dump(rewards, f, indent=4)
    if str(user_id) not in rewards:
        rewards[str(user_id)] = {'last_reward_time': 0}
        with open('rewards.json', 'w') as f:
            json.dump(rewards, f, indent=4)
    return rewards[str(user_id)]['last_reward_time']

def update_last_reward_time(user_id):
    rewards = check_last_reward_time(user_id)
    rewards[str(user_id)] = {'last_reward_time': time.time()}
    with open('rewards.json', 'w') as f:
        json.dump(rewards, f, indent=4)

def can_receive_reward(user_id):
    last_reward_time = check_last_reward_time(user_id)
    current_time = time.time()
    return current_time - last_reward_time >= 86400  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞

def update_last_message_time(user_id):
    with open('last_messages.json', 'r+') as f:
        try:
            last_messages = json.load(f)
        except json.JSONDecodeError:
            last_messages = {}
        user_id_str = str(user_id)
        now = datetime.utcnow()
        last_message_time = last_messages.get(user_id_str, {'last_message': None})['last_message']
        last_message_date = datetime.strptime(last_message_time, '%Y-%m-%d %H:%M:%S') if last_message_time else None
        if not last_message_date or now - last_message_date > timedelta(days=1):
            last_messages[user_id_str] = {'last_message': now.strftime('%Y-%m-%d %H:%M:%S')}
            f.seek(0)
            json.dump(last_messages, f, indent=4)
            f.truncate()
            return True
        return False

def get_today():
    return datetime.now().strftime('%Y-%m-%d')

def read_data():
    try:
        with open('percentages.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return {}

def write_data(data):
    with open('percentages.json', 'w') as file:
        json.dump(data, file, indent=4)

async def give_jrun(ctx, member, amount=1):
    print('–ö—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∏–ª –∂—Ä—É–Ω')
    balances = check_balance_file(member.id)
    if str(member.id) in balances:
        user_balance = balances[str(member.id)]
        user_balance['balance'] += amount
        balances[str(member.id)] = user_balance
        with open('Jrun_balance.json', 'w') as f:
            json.dump(balances, f, indent=4)
        await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ñ—Ä—É–Ω–æ–≤.")
        print(f"{member.mention} –ø–æ–ª—É—á–∏–ª {amount} –ñ—Ä—É–Ω–æ–≤.")
    else:
        await ctx.send("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞.")

def update_last_reward_time(member_id):
    with open('rewards.json', 'r+') as f:
        try:
            rewards = json.load(f)
        except json.JSONDecodeError:
            rewards = {}
        rewards[str(member_id)] = {'last_reward': datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}
        f.seek(0)
        json.dump(rewards, f, indent=4)
        f.truncate()

async def send_private_message(member, content):
    try:
        await member.send(content)
    except discord.Forbidden:
        await ctx.send(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.display_name}.")

def load_ticket_data():
    try:
        with open(ticket_data_file, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_ticket_data(ticket_data):
    with open(ticket_data_file, "w") as file:
        json.dump(ticket_data, file, indent=4)

def add_tickets(user_id, amount):
    ticket_data = load_ticket_data()
    user_id_str = str(user_id)
    if user_id_str in ticket_data:
        ticket_data[user_id_str]['tickets'] += amount
    else:
        ticket_data[user_id_str] = {'tickets': amount}
    save_ticket_data(ticket_data)

def get_user_tickets(user_id):
    ticket_data = load_ticket_data()
    return ticket_data.get(str(user_id), {'tickets': 0})['tickets']

def draw_lottery(user_id):
    user_tickets = get_user_tickets(user_id)
    if user_tickets == 0:
        return "–£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤."
    for ticket_threshold, prize_dict in rewards.items():
        if user_tickets >= ticket_threshold:
            prize = random.choices(list(prize_dict.keys()), list(prize_dict.values()))[0]
            return f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize}!"

    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."

def update_balance_and_react(message):
    balances = check_balance_file(message.author.id)
    role_names = [role.name for role in message.author.roles]
    if "–û–≥–æ–Ω—å" in role_names:
        balances[str(message.author.id)]['balance'] += 2
    else:
        balances[str(message.author.id)]['balance'] += 1

    if "—Å—Ñ–µ—Ä–∞" in role_names or "–±–µ—Ä—Å–µ—Ä–∫" in role_names:
        balances[str(message.author.id)]['balance'] += 1

    with open('Jrun_balance.json', 'w') as f:
        json.dump(balances, f, indent=4)

    return balances


@bot.event
async def on_ready():
    print(f"{bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

#–ï–≤—Ä–∏–≤–∞–Ω –°–æ–æ–±—â–µ–Ω–∏–µ
@bot.event
async def on_message(message):
    if not message.content.startswith('!'):
        return
    if message.author == bot.user:
        return

    user_id = message.author.id
    moderator_roles = ["–ß—É–¥–æ", "–°—Ñ–µ—Ä–∞", "–í–ª–∞–¥", "–°–µ—Ä–∂–∞–Ω—Ç –∞–ø–µ–ª—å—Å–∏–Ω", "–ë–µ—Ä—Å–µ—Ä–∫"]
    is_moderator = any(role.name in moderator_roles for role in message.author.roles)

    if is_moderator:
        await bot.process_commands(message)
        return

    current_time = time.time()
    message_count.setdefault(user_id, {"count": 0, "last_message_time": 0})
    if current_time - message_count[user_id]["last_message_time"] > 1800:  # 1800 —Å–µ–∫—É–Ω–¥ = 30 –º–∏–Ω—É—Ç
        message_count[user_id]["count"] = 0
    message_count[user_id]["last_message_time"] = current_time
    message_count[user_id]["count"] += 1

#2
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        response = random.choice(["–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞"])
        await ctx.send(response)

# –ñ—Ä—É–Ω (–ï–≤—Ä–∏—ã–≤–∞–Ω)
@bot.event
async def on_raw_reaction_add(payload):
    channel_id = 951816149291659274
    if payload.channel_id == channel_id:
        guild = bot.get_guild(payload.guild_id)
        member = guild.get_member(payload.user_id)
        if "–û–≥–æ–Ω—å" in [role.name for role in member.roles]:
            await give_jrun(member, amount=2)
        else:
            if check_last_reward_time(member.id) is None or (
                    datetime.utcnow() - check_last_reward_time(member.id)).days >= 1:
                await give_jrun(member)
                update_last_reward_time(member.id)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if can_receive_reward(message.author.id):
        balances = update_balance_and_react(message)
        await message.add_reaction('üî•')
        update_last_reward_time(message.author.id)

    await bot.process_commands(message)

# –í—Ä–µ–º—è
@bot.command(name='–í—Ä–µ–º—è')
async def get_time(ctx):
    time1 = pytz.timezone('Asia/Sakhalin')
    time2 = datetime.datetime.now(time1)
    time3 = time2 + datetime.timedelta(hours=0)
    formatted_time = time3.strftime("%H:%M:%S")
    await ctx.send(f"–°–µ–π—á–∞—Å —É –ß—É–¥–∞—á–∫–∏: {formatted_time}")
    print('–ö–æ–º–∞–Ω–¥–∞ –í—Ä–µ–º—è')
# –ö–æ–º–∞–Ω–¥–∞ - Vk Play
@bot.command(name='–í–∫–ø–ª–µ–π')
async def vk_play(ctx):
    await ctx.send("# [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Vk Play Live](https://live.vkplay.ru/chudachkapw)")
# –ö–æ–º–∞–Ω–¥–∞ - Twitch
@bot.command(name='–¢–≤–∏—á')
async def Twitch(ctx):
    await ctx.send("# [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Twitch](https://www.twitch.tv/chudachkafun)")
# –ö–æ–º–∞–Ω–¥–∞ - –î–∏—Å–∫–æ—Ä–¥
@bot.command(name='–î–∏—Å–∫–æ—Ä–¥')
async def discord_info(ctx):
    await ctx.send("# [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É Discord!](https://discord.com/invite/pQ9zfKzmCj)")
# –ö–æ–º–∞–Ω–¥–∞ - –ü–ö
@bot.command(name='–ü–ö')
async def pc_info(ctx):
    await ctx.send("## –ö–æ–Ω—Ñ–∏–≥ –ü–ö –ß—É–¥–∞—á–∫–∏\n Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz\n Motherboard ‚Äî Gigabyte GA-Z97P-D3\n MSI GeForce RTX 4060 GAMING X")
# –ö–æ–º–∞–Ω–¥–∞ - –ú–µ–º—ã
@bot.command(name='–º–µ–º')
async def memes(ctx):
    await ctx.send("# [–ö–∏–Ω—å –º–µ–º –ß—É–¥–∞—á–∫–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é!](https://memealerts.com/643f478676d4d6f40e06de95)")
# –ö–æ–º–∞–Ω–¥–∞ - –ë—É—Å—Ç–∏
@bot.command(name='–±—É—Å—Ç–∏')
async def bysti(ctx):
    await ctx.send("# [–ü–æ–¥–¥–µ—Ä–∂–∏ –ß—É–¥–∞—á–∫—É –Ω–∞ –±—É—Å—Ç–∏!](https://boosty.to/chudachkapw/purchase/784395?share=subscription_link)")
# –ö–æ–º–∞–Ω–¥–∞ - –ì–¥–µ —Å—Ç—Ä–∏–∏–º
@bot.command(name='–ì–¥–µ—Å—Ç—Ä–∏–º')
async def stream_info(ctx):
    excuses = [
        "–°–µ–≥–æ–¥–Ω—è —É–∂–µ –Ω–µ —É—Å–ø–µ–µ–º, –∂–¥–µ–º –∑–∞–≤—Ç—Ä–∞.",
        "–°—Ç—Ä–∏–º –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –æ–∂–∏–¥–∞–π—Ç–µ!",
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."
    ]
    excuse = random.choice(excuses)
    await ctx.send(f"{excuse}")
# –ö–æ–º–∞–Ω–¥–∞ - –î–æ—Ç–∞
@bot.command(name='–¥–æ—Ç–∞')
async def play_dota(ctx):
    await ctx.send(f"–ß—É–¥–∞—á–∫–∞ –ø–æ–∏–≥—Ä–∞–µ—Ç –≤ –¥–æ—Ç—É –∑–∞ –º–Ω–æ–≥–æ-–º–Ω–æ–≥–æ —Ä—É–±–ª–µ–π.")

# –ö–æ–º–∞–Ω–¥–∞ - –¢–∞–Ω–∫–∏
@bot.command(name='—Ç–∞–Ω–∫–∏')
async def play_tanki(ctx):
    message = "```–ß—É–¥–æ –Ω–µ –ø–æ–∏–≥—Ä–∞–µ—Ç –≤ –¢–∞–Ω–∫–∏ ü§°```"
    await ctx.send(message)


# !—Å—Ç—Ä–∏–º
@bot.command()
@commands.has_permissions(administrator=True)
async def —Å—Ç—Ä–∏–º(ctx, *, comment: str = ''):
    channel_id = 1179745995345645609
    channel = bot.get_channel(channel_id)
    if channel is not None:
        message = (
            f"## –ù–∞—á–∞–ª—Å—è —Å—Ç—Ä–∏–º! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å! {comment}\n"
            "## [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Twitch](https://www.twitch.tv/chudachkafun)\n"
            "## [–ß—É–¥–∞—á–∫–∞ - –í—ã–∂–∏–≤–∞–Ω–∏–µ Vk Play Live](https://live.vkplay.ru/chudachkapw)"
        )
        await channel.send(message)
    else:
        await ctx.send("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.")


# –∂–æ–ø–∫–∏
@bot.command(name='–ù–æ–≤–∞—è–ñ–æ–ø–∫–∞')
async def new_user(ctx, nickname):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    for user_info in top_list:
        if user_info['–Ω–∏–∫–Ω–µ–π–º'] == nickname:
            await ctx.send("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
    user_num = len(top_list) + 1
    top_list.append({'–Ω–∏–∫–Ω–µ–π–º': nickname, '–∂–æ–ø–∫–∏': 2})
    save_top_list(top_list)
    await ctx.send(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º {user_num}.")
@bot.command(name='–ù–æ–º–µ—Ä–∞–∂–æ–ø–æ–∫')
async def list_users(ctx):
    top_list = load_top_list()
    users_info = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
    for user_num, user_info in enumerate(top_list, start=1):
        users_info += f"{user_num}. {user_info['–Ω–∏–∫–Ω–µ–π–º']} - ({user_info['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫)\n"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–æ–ø–æ–∫ –∫ –≤—ã–≤–æ–¥—É
    await ctx.send(users_info)
@bot.command(name='–ñ–æ–ø–∫–∞')
async def asses_leaderboard(ctx):
    top_list = load_top_list()
    leaderboard = "–¢–æ–ø-5 –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∂–æ–ø–æ–∫:\n"
    for i, user_info in enumerate(sorted(top_list, key=lambda x: x['–∂–æ–ø–∫–∏'], reverse=True)[:5], start=1):
        leaderboard += f"{i}. {user_info['–Ω–∏–∫–Ω–µ–π–º']} - ({user_info['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫)\n"
    await ctx.send(leaderboard)
@bot.command(name='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏–∂–æ–ø–∫–∏')
async def transfer_asses(ctx, from_user: int, to_user: int, amount: int):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    if from_user < 1 or from_user > len(top_list) or to_user < 1 or to_user > len(top_list):
        await ctx.send("–û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        return
    top_list[from_user - 1]['–∂–æ–ø–∫–∏'] -= amount
    top_list[to_user - 1]['–∂–æ–ø–∫–∏'] += amount
    save_top_list(top_list)

    await ctx.send(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∂–æ–ø–æ–∫ –æ—Ç {top_list[from_user - 1]['–Ω–∏–∫–Ω–µ–π–º']} –∫ {top_list[to_user - 1]['–Ω–∏–∫–Ω–µ–π–º']}.")
@bot.command(name='–º–∏–Ω—É—Å')
async def minus_asses(ctx, amount: int, user_number: int):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    if user_number < 1 or user_number > len(top_list):
        await ctx.send("–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    top_list[user_number - 1]['–∂–æ–ø–∫–∏'] -= amount
    save_top_list(top_list)
    await ctx.send(f"–£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount} –∂–æ–ø–æ–∫ —É {top_list[user_number - 1]['–Ω–∏–∫–Ω–µ–π–º']}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {top_list[user_number - 1]['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫.")
@bot.command(name='–ø–ª—é—Å')
async def plus_asses(ctx, amount: int, user_number: int):
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    top_list = load_top_list()
    if user_number < 1 or user_number > len(top_list):
        await ctx.send("–û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    top_list[user_number - 1]['–∂–æ–ø–∫–∏'] += amount
    save_top_list(top_list)
    await ctx.send(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –∂–æ–ø–æ–∫ –∫ {top_list[user_number - 1]['–Ω–∏–∫–Ω–µ–π–º']}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {top_list[user_number - 1]['–∂–æ–ø–∫–∏']} –∂–æ–ø–æ–∫.")

#–ø–Ω—É—Ç—å
@bot.command()
async def –ø–Ω—É—Ç—å(ctx, *, user: discord.Member):
    if user == ctx.author:
        await ctx.send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–Ω—É—Ç—å —Å–∞–º–∏ —Å–µ–±—è!")
        return

    role_names = [role.name for role in ctx.author.roles]
    if "–°—Ñ–µ—Ä–∞" in role_names or "–ß—É–¥–æ" in role_names:
        await send_private_message(user, f"–í–∞—Å –ø–Ω—É–ª–∏!")
        await ctx.send(f"{user.display_name} —É—Å–ø–µ—à–Ω–æ –ø–Ω—É—Ç!")
    else:
        current_time = time.time()
        message_count.setdefault(ctx.author.id, {"count": 0, "last_message_time": 0})
        if current_time - message_count[ctx.author.id]["last_message_time"] > 3600:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2 –ø–∏–Ω–∫–∞ –≤ —á–∞—Å
            message_count[ctx.author.id]["count"] = 0
        message_count[ctx.author.id]["last_message_time"] = current_time
        message_count[ctx.author.id]["count"] += 1
        if message_count[ctx.author.id]["count"] > 2:
            await ctx.send("–í—ã —É–∂–µ –ø–Ω—É–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å!")
            return
        else:
            await send_private_message(user, f"–í–∞—Å –ø–Ω—É–ª–∏!")
            await ctx.send(f"{user.display_name} –ø–Ω—É—Ç!")

@bot.command(name='add_tickets')
@commands.has_any_role("–ß—É–¥–æ", "–°—Ñ–µ—Ä–∞", "–í–ª–∞–¥", "–°–µ—Ä–∂–∞–Ω—Ç –∞–ø–µ–ª—å—Å–∏–Ω", "–ë–µ—Ä—Å–µ—Ä–∫")
async def add_tickets_command(ctx, member: discord.Member, amount: int):
    if amount <= 0:
        await ctx.send("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        return
    add_tickets(member.id, amount)
    await ctx.send(f"{amount} –±–∏–ª–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}.")

@bot.command(name='my_tickets')
async def my_tickets_command(ctx):
    tickets = get_user_tickets(ctx.author.id)
    await ctx.send(f"–£ –≤–∞—Å {tickets} –±–∏–ª–µ—Ç–æ–≤.")

@bot.command(name='lottery')
async def lottery_command(ctx):
    result = draw_lottery(ctx.author.id)
    await ctx.send(result)

# –ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞
@bot.command()
async def –±–∞–ª–∞–Ω—Å(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    try:
        balances = check_balance_file(member.id)
        balance = balances[str(member.id)]['balance']
        await ctx.send(f"–ë–∞–ª–∞–Ω—Å {member.display_name}: {balance} –∂—Ä—É–Ω–æ–≤")
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

@–±–∞–ª–∞–Ω—Å.error
async def –±–∞–ª–∞–Ω—Å_error(ctx, error):
    await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {error}")

@bot.command()
@commands.has_any_role("–ß—É–¥–æ", "–°—Ñ–µ—Ä–∞", "–í–ª–∞–¥", "–°–µ—Ä–∂–∞–Ω—Ç –∞–ø–µ–ª—å—Å–∏–Ω", "–ë–µ—Ä—Å–µ—Ä–∫")
async def –ø–æ–ª—É—á–µ–Ω–∏–µ_–∂—Ä—É–Ω–æ–≤(ctx, member: discord.Member, amount: int = 1):
    await give_jrun(ctx, member, amount)
@–ø–æ–ª—É—á–µ–Ω–∏–µ_–∂—Ä—É–Ω–æ–≤.error
async def –ø–æ–ª—É—á–µ–Ω–∏–µ_–∂—Ä—É–Ω–æ–≤_error(ctx, error):
    if isinstance(error, commands.MissingAnyRole):
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

#

# –¢–æ–∫–µ–Ω
bot.run("MTE2NjYzODE2NTY1ODk3NjI3Nw.Gi1Xt0.0xhlWdERtyKuWQSupLmmN_hJ8FPdFXK9RKdvjU")
#–õ–æ—Ç–æ MTE2NjYzODE2NTY1ODk3NjI3Nw.Gi1Xt0.0xhlWdERtyKuWQSupLmmN_hJ8FPdFXK9RKdvjU
#–ß—É–¥–æ MTIzMzAyMTQ4NzE3MTEwODkwNQ.GJHW7F.XZRRzqVMFKD4MW0N5yVzjJIfwFZdXuVICmWcRw
